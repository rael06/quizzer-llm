import { z } from "zod";
import Answer from "./Answer";
import { v4 as uuidV4 } from "uuid";
import assert from "assert";
import PromptService from "../services/PromptService";

export default class Question {
  private _id: string;
  private _question: string;
  private _propositions: string[];
  private _answer: Answer | null;

  constructor(id: string, question: string, propositions: string[]) {
    this._id = id;
    this._question = question;
    this._propositions = propositions;
    this._answer = null;
  }

  public static parseFromAi(message: string): Question {
    // Extract question and propositions from the raw question generated by the model
    const regexp = new RegExp(
      `${PromptService.getInstance().startToken}(.+)<\\+>(.+)\\|(.+)\\|(.+)\\|(.+)`,
      "m",
    );
    const match = message.match(regexp);
    assert(match, "Invalid question format");

    const [_, question, ...propositions] = match;

    const validatedJson = z
      .object({
        question: z.string(),
        propositions: z.array(z.string()),
      })
      .parse({ question, propositions: propositions.map((p) => p.trim()) });

    return new Question(
      uuidV4(),
      validatedJson.question,
      validatedJson.propositions,
    );
  }

  public toView() {
    return {
      id: this._id,
      question: this._question,
      propositions: this._propositions,
      answer: this._answer?.toView() ?? null,
    };
  }

  public get id(): string {
    return this._id;
  }

  public get question(): string {
    return this._question;
  }

  public get propositions(): string[] {
    return this._propositions;
  }

  public get answer(): Answer | null {
    return this._answer;
  }

  public set answer(answer: Answer) {
    this._answer = answer;
  }
}
